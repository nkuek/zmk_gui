/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        Tap_Hold: Tap_Hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        Tap_Hold_Layer: Tap_Hold_Layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_HOLD_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        Balanced_Hold_Tap: Balanced_Hold_Tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        go_to_tmux_tab_1 {
            bindings = <&tmux_tab_1>;
            timeout-ms = <50>;
            key-positions = <19 1>;
        };

        go_to_tmux_tab_2 {
            bindings = <&tmux_tab_2>;
            timeout-ms = <50>;
            key-positions = <19 2>;
        };

        go_to_tmux_tab_3 {
            bindings = <&tmux_tab_3>;
            timeout-ms = <50>;
            key-positions = <19 3>;
        };

        go_to_tmux_tab_4 {
            bindings = <&tmux_tab_4>;
            timeout-ms = <50>;
            key-positions = <19 4>;
        };

        go_to_tmux_tab_5 {
            bindings = <&tmux_tab_5>;
            timeout-ms = <50>;
            key-positions = <19 5>;
        };

        go_to_tmux_tab_6 {
            bindings = <&tmux_tab_6>;
            timeout-ms = <50>;
            key-positions = <16 6>;
        };

        go_to_tmux_tab_7 {
            bindings = <&tmux_tab_7>;
            timeout-ms = <50>;
            key-positions = <16 7>;
        };

        go_to_tmux_tab_8 {
            bindings = <&tmux_tab_8>;
            timeout-ms = <50>;
            key-positions = <16 8>;
        };

        go_to_tmux_tab_9 {
            bindings = <&tmux_tab_9>;
            timeout-ms = <50>;
            key-positions = <16 9>;
        };

        Nvim_Save {
            bindings = <&nvim_save>;
            key-positions = <39 23>;
        };

        Enter2 {
            bindings = <&kp ENTER>;
            key-positions = <40 22>;
            timeout-ms = <50>;
        };

        Arc_Tab_1 {
            bindings = <&kp LS(LC(NUMBER_1))>;
            key-positions = <38 1>;
        };

        Arc_Tab_2 {
            bindings = <&kp LS(LC(NUMBER_2))>;
            key-positions = <38 2>;
        };

        Screenshot {
            bindings = <&kp LG(DOLLAR)>;
            key-positions = <38 16>;
        };

        Area_Screenshot {
            bindings = <&kp LG(PERCENT)>;
            key-positions = <38 17>;
        };

        Nvim_Quit {
            bindings = <&nvim_quit>;
            key-positions = <39 25>;
        };

        Nvim_Force_Quit {
            bindings = <&nvim_force_quit>;
            key-positions = <39 38 25>;
        };

        Nvim_Discard {
            bindings = <&nvim_discard>;
            key-positions = <39 21 23>;
            require-prior-idle-ms = <250>;
        };

        Nvim_Save_All {
            bindings = <&nvim_save_all>;
            key-positions = <39 20 23>;
            slow-release;
        };

        const {
            bindings = <&const>;
            key-positions = <28 22>;
        };

        Caps_Word {
            bindings = <&caps_word>;
            key-positions = <28 31>;
        };

        Arrow_Function {
            bindings = <&arrow_function>;
            key-positions = <33 13>;
        };

        Function {
            bindings = <&function>;
            key-positions = <22 7>;
        };
    };

    macros {
        tmux_tab_1: tmux_tab_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp NUMBER_1>;
        };

        tmux_tab_2: tmux_tab_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp NUMBER_2>;
        };

        tmux_tab_3: tmux_tab_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp NUMBER_3>;
        };

        tmux_tab_4: tmux_tab_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp NUMBER_4>;
        };

        tmux_tab_5: tmux_tab_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp N5>;
        };

        tmux_tab_6: tmux_tab_6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp NUMBER_6>;
        };

        tmux_tab_7: tmux_tab_7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp N7>;
        };

        tmux_tab_8: tmux_tab_8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp N8>;
        };

        tmux_tab_9: tmux_tab_9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Q) &kp N9>;
        };

        nvim_save: nvim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp ENTER>;
            label = "NVIM_SAVE";
        };

        nvim_discard: nvim_discard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp E &kp EXCLAMATION &kp ENTER>;
            label = "NVIM_DISCARD";
            wait-ms = <0>;
        };

        nvim_quit: nvim_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q &kp ENTER>;
            label = "NVIM_QUIT";
        };

        nvim_force_quit: nvim_force_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q &kp A &kp ENTER>;
            label = "NVIM_FORCE_QUIT";
        };

        nvim_save_all: nvim_save_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp A &kp ENTER>;
            label = "NVIM_SAVE_ALL";
        };

        open_mouseless: open_mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(M))>;
            label = "OPEN_MOUSELESS";
        };

        close_mouseless: close_mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(X))>;
            label = "CLOSE_MOUSELESS";
        };

        const: const {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp T &kp SPACE>;
            label = "CONST";
        };

        arrow_function: arrow_function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW_FUNCTION";
        };

        function: function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp SPACE>;
            label = "FUNCTION";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        gallium {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp B                            &Tap_Hold LCTRL L  &Tap_Hold LEFT_ALT D               &Tap_Hold LEFT_GUI W  &kp Z           &kp SQT                  &Tap_Hold RIGHT_GUI F  &Tap_Hold RIGHT_ALT O  &Tap_Hold RCTRL U  &kp J                             &kp BSPC
&kp TAB         &Balanced_Hold_Tap LEFT_SHIFT N  &kp R              &kp T                              &kp S                 &kp G           &kp Y                    &kp H                  &kp A                  &kp E              &Balanced_Hold_Tap RIGHT_SHIFT I  &kp SEMI
&kp LEFT_SHIFT  &kp Q                            &kp X              &kp M                              &kp C                 &kp V           &kp K                    &kp P                  &kp COMMA              &kp DOT            &kp FSLH                          &kp MINUS
                                                                    &Tap_Hold LS(LA(LCTRL)) BACKSPACE  &mo 2                 &lt 1 RETURN    &Tap_Hold_Layer 1 SPACE  &lt 2 BACKSPACE        &lt 3 DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1    &kp N2       &kp N3         &kp N4     &kp N5    &kp N6    &kp N7         &kp N8       &kp N9     &kp N0     &kp BSPC
&trans     &kp LEFT  &kp UP       &kp DOWN       &kp RIGHT  &trans    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp ENTER  &kp ENTER
&trans     &trans    &kp PAGE_UP  &kp PAGE_DOWN  &trans     &trans    &trans    &kp PAGE_DOWN  &kp PAGE_UP  &trans     &trans     &trans
                                  &trans         &trans     &trans    &trans    &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL   &kp AT         &kp HASH          &kp DLLR  &kp PRCNT    &kp CARET      &kp AMPS      &kp ASTRK       &kp LPAR         &kp RPAR      &kp DELETE
&trans     &kp EQUAL  &kp SQT        &kp MINUS         &trans    &trans       &kp BACKSLASH  &kp LS(LPAR)  &kp LBKT        &kp RBKT         &kp LS(RPAR)  &kp RET
&kp LSHFT  &kp PLUS   &kp LESS_THAN  &kp GREATER_THAN  &trans    &trans       &trans         &trans        &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans        &trans
                                     &trans            &trans    &trans       &trans         &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&trans       &trans        &trans        &trans             &trans           &trans              &trans  &trans  &trans  &trans  &trans      &trans
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4        &trans  &trans  &trans  &trans  &trans      &trans
&bootloader  &trans        &trans        &trans             &trans           &bt BT_CLR          &trans  &trans  &trans  &trans  &sys_reset  &bootloader
                                         &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE    &trans  &trans  &trans
            >;
        };
    };
};
